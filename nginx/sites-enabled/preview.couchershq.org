server {
    listen 443 ssl;
    server_name preview.couchershq.org;

    access_log /var/log/nginx/preview.couchershq.org.access.log;
    error_log /var/log/nginx/preview.couchershq.org.error.log;

    ssl_certificate /certs/live/preview.couchershq.org/fullchain.pem;
    ssl_certificate_key /certs/live/preview.couchershq.org/privkey.pem;

    location = / {
        add_header Content-Type text/plain;
        return 200 "Couchers.org deploy previews.\n\nVisit https://next.couchershq.org for the latest staging environment.\n\nFor previews, go to https://gitlab.com/couchers/couchers/-/pipelines and find the right link or see instructions on GitHub.";
    }

    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }
}

server {
    # we want to be able to preview frontend PRs, etc, so they're being uploaded to e.g.
    # https://couchers-dev-assets.s3.amazonaws.com/frontend/ci-test-results-90b9e9ee/index.html
    # the problem is that this tries to load js from /js/..., which gets screwed up being in a subfolder
    # so we proxy them through nginx that directs e.g.
    # https://ci-test-results-90b9e9ee--frontend.preview.couchershq.org/static/js/main.dfb1f1d2.chunk.js
    # to
    # https://couchers-dev-assets.s3.amazonaws.com/frontend/ci-test-results-90b9e9ee/static/js/main.dfb1f1d2.chunk.js

    listen 443 ssl;

    # matches sub1--sub2.preview.couchershq.org, e.g.
    # ci-test-results-90b9e9ee--frontend.preview.couchershq.org
    # so $sub1=ci-test-results-90b9e9ee, $sub2=frontend
    server_name ~^(?<sub1>.+)--(?<sub2>.+)\.preview\.couchershq\.org$;

    access_log /var/log/nginx/preview.couchershq.org.access.log;
    error_log /var/log/nginx/preview.couchershq.org.error.log;

    ssl_certificate /certs/live/preview.couchershq.org/fullchain.pem;
    ssl_certificate_key /certs/live/preview.couchershq.org/privkey.pem;

    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }

    location / {
        # we want to do some logic based on upstream errors
        proxy_intercept_errors on;
        # if we get a 403 Forbidden (what S3 sends for not found), get instead the index page
        error_page 403 = @index;
        error_page 404 = @index;
        proxy_pass https://couchers-dev-assets.s3.amazonaws.com/$sub2/$sub1$uri;
    }

    location @index {
        proxy_pass https://couchers-dev-assets.s3.amazonaws.com/$sub2/$sub1/index.html;
    }
}
